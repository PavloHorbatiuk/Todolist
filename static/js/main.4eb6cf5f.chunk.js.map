{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","EdditAbleSpan.tsx","Todolist.tsx","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addTask","trim","addItem","className","TextField","variant","label","id","defaultValue","size","value","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","color","onClick","AddBox","removeTodolist","initailState","v1","RemoveTodolistAC","todolistId","type","initialState","EdditAbleSpan","editMode","seteditMode","autoFocus","onBlur","onDoubleClick","Todolist","useCallback","changeTodolistTitle","newTitle","onAllClickHandler","changeFilter","onActiveHandler","onCompletedClickHandler","tasksForTodoList","tasks","filter","t","isDone","Delete","map","Checkbox","newIsDoneValue","checked","changeTaskStatus","newValue","changeTaskTitle","removeTask","fontSize","Button","AppWithRedux","dispatch","useDispatch","todolists","useSelector","state","action","tasksId","removeTaskAC","addTaskAC","changeStatus","taskId","changeTaskStatusAC","changeTaskTitleAC","addTodolist","AddTodolistAC","ChangeTodolistTitleAC","Box","sx","flexGrow","AppBar","position","Toolbar","edge","Typography","component","Container","fixed","Grid","container","style","padding","spacing","tl","item","Paper","rootReducer","combineReducers","todolist","find","stateCopy","filteredTasks","newTask","newTasks","todolistTasks","newTasksArray","task","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4eb6cf5f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormType)  {\r\n    console.log('AddItemForm')\r\n    let [title, setTitle] = useState(\"\");\r\n    let [error, setError] = useState<string | null>(null)\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title.trim());\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    };\r\n    const onKeyPressPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) setError(null)\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <TextField\r\n                variant={'filled'}\r\n                label=\"Введите задание\"\r\n                id=\"outlined-size-small\"\r\n                defaultValue=\"\"\r\n                size=\"small\"\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressPressHandler}\r\n                error={!!error}\r\n                helperText={error}\r\n            />\r\n            <IconButton color=\"primary\"\r\n                        onClick={addTask}><AddBox/></IconButton>\r\n            {/*{error && <div className='error-message'>{error}</div>}*/}\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default AddItemForm;\r\n","import {FilterValuesType, TodolistType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nconst removeTodolist = 'REMOVE-TODOLIST'\r\n\r\n\r\nexport type RemoveTodolistActionType={\r\n    type:'REMOVE-TODOLIST',\r\n    id:string\r\n}\r\nexport type AddTodolistActionType={\r\n    type:'ADD-TODOLIST',\r\n    title:string\r\n    todolistId:string\r\n\r\n}\r\nexport type CangeTodolistTitleActionType={\r\n    type:'CHANGE-TODOLIST-TITLE'\r\n    title:string\r\n    id:string\r\n}\r\nexport type ChangeTodolistFilter={\r\n    type:'CHANGE-TODOLIST-FILTER'\r\n    filter:FilterValuesType\r\n    id:string\r\n}\r\ntype ActionType = RemoveTodolistActionType|AddTodolistActionType|CangeTodolistTitleActionType|ChangeTodolistFilter\r\nexport let todolistId1 = v1();\r\nexport let todolistId2 = v1();\r\n\r\nconst initailState: Array<TodolistType>=[\r\n        // {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        // {id: todolistId2, title: \"What to buy\", filter: \"all\"},\r\n]\r\nexport const todolistsReducer = (state: Array<TodolistType>=initailState, action: ActionType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case removeTodolist:\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST': {\r\n            return [...state, {\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE':{\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.title = action.title\r\n            }\r\n            return[...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            let todolist = state.find(tl => tl.id === action.id)\r\n            if (todolist) {\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n           return state;\r\n    }\r\n}\r\nexport const RemoveTodolistAC=(todolistId:string):RemoveTodolistActionType=>{\r\n    return {type:\"REMOVE-TODOLIST\",id:todolistId}\r\n}\r\nexport const AddTodolistAC=(title:string):AddTodolistActionType=>{\r\n    return{type:'ADD-TODOLIST',title,todolistId:v1()}\r\n}\r\nexport const ChangeTodolistTitleAC=(title:string,id:string):CangeTodolistTitleActionType=>{\r\n    return {type:'CHANGE-TODOLIST-TITLE',title:title,id:id}\r\n}\r\nexport const ChangeTodolistFilterAC=(filter:FilterValuesType,id:string):ChangeTodolistFilter=>{\r\n    return {type:'CHANGE-TODOLIST-FILTER',filter:filter,id:id}\r\n}","import {TasksStateType } from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType } from \"./todolists-reducer\";\r\n\r\n\r\nexport type RemoveTasksActionType = {\r\n    type: \"REMOVE-TASKS\",\r\n    todolistId: string,\r\n    tasksId: string\r\n}\r\nexport type AddTasksType = {\r\n    type: 'ADD-TASK'\r\n    title: string,\r\n    todolistId: string\r\n}\r\nexport type changeTaskStatusType = {\r\n    type: \"CHANGE-STATUS-TASKS\"\r\n    isDone: boolean,\r\n    todolistId: string,\r\n    taskId: string\r\n}\r\nexport type changeTasksTitleType = {\r\n    type: \"CHANGE-TASK-TITLE\"\r\n    title: string,\r\n    todolistId: string,\r\n    taskId: string\r\n}\r\n\r\ntype ActionType =\r\n    RemoveTasksActionType\r\n    | AddTasksType\r\n    | changeTaskStatusType\r\n    | changeTasksTitleType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nconst initialState: TasksStateType= {\r\n    // [todolistId1]: [\r\n    //     {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n    //     {id: v1(), title: \"JS\", isDone: true}\r\n    // ],\r\n    // [todolistId2]: [\r\n    //     {id: v1(), title: \"Book\", isDone: true},\r\n    //     {id: v1(), title: \"Milk\", isDone: true},\r\n    // ]\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASKS\": {\r\n            const stateCopy = {...state};\r\n            const tasks = state[action.todolistId];\r\n            const filteredTasks = tasks.filter(t => t.id !== action.tasksId)\r\n            stateCopy[action.todolistId] = filteredTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state};\r\n            const tasks = stateCopy[action.todolistId]\r\n            const newTask = {id: v1(), title: action.title, isDone: false};\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy\r\n        }\r\n        case \"CHANGE-STATUS-TASKS\": {\r\n            let todolistTasks= state[action.todolistId]\r\n            let newTasksArray = todolistTasks.map(t=>t.id===action.taskId?{...t,isDone:action.isDone}:t);\r\n            state[action.todolistId]=newTasksArray\r\n            return ({...state})\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n           let todolistTasks=state[action.todolistId]\r\n\r\n            let task = todolistTasks.find(t => t.id === action.taskId);\r\n            if (task) {\r\n                task.title = action.title;\r\n            }\r\n            state[action.title]=[...todolistTasks]\r\n            return ({...state})\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const stateCopy = {...state};\r\n            stateCopy[action.todolistId] = [];\r\n            return stateCopy\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const removeTaskAC = (tasksId: string, todolistId: string): RemoveTasksActionType => {\r\n    return {type: \"REMOVE-TASKS\", tasksId, todolistId,}\r\n};\r\nexport const addTaskAC = (title: string, todolistId: string): AddTasksType => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n};\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): changeTaskStatusType => {\r\n    return {type: \"CHANGE-STATUS-TASKS\", isDone, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): changeTasksTitleType => {\r\n    return {type: \"CHANGE-TASK-TITLE\", taskId, title, todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EdditAbleSpanType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EdditAbleSpan = React.memo((props: EdditAbleSpanType) => {\r\n    let [editMode, seteditMode] = useState(false)\r\n    let [title, setTitle] = useState(props.title)\r\n    const activateEditmode = () => {\r\n        seteditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViwMode = () => {\r\n        seteditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViwMode}/>\r\n        : <span onDoubleClick={activateEditmode}>{props.title}</span>\r\n})","import React, {ChangeEvent, useCallback} from 'react';\r\nimport './App.css';\r\nimport {FilterValuesType, TasksType} from \"./App\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {EdditAbleSpan} from \"./EdditAbleSpan\";\r\n\r\ntype TodolistType = {\r\n    title: string\r\n    tasks: Array<TasksType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todolistId: string) => void\r\n    filter: 'all' | \"active\" | \"completed\"\r\n    id: string\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TasksType>\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: TodolistType) {\r\n    console.log(\"Todolist\")\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id);\r\n    }, [props.addTask, props.id]);\r\n    const removeTodolist = useCallback(() => {\r\n        props.removeTodolist(props.id)\r\n    }, [props.removeTodolist, props.id]);\r\n    const changeTodolistTitle = useCallback((newTitle: string) => {\r\n        props.changeTodolistTitle(props.id, newTitle);\r\n    }, [props.changeTodolistTitle, props.id])\r\n    const onAllClickHandler = useCallback(() => {\r\n        props.changeFilter(\"all\", props.id)\r\n    }, [props.changeFilter, props.id])\r\n    const onActiveHandler = useCallback(() => {\r\n        props.changeFilter(\"active\", props.id)\r\n    }, [props.changeFilter, props.id])\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        props.changeFilter(\"completed\", props.id)\r\n    }, [props.changeFilter, props.id]);\r\n\r\n    let tasksForTodoList = props.tasks;\r\n    if (props.filter === \"active\") {\r\n        tasksForTodoList = props.tasks.filter(t => t.isDone === false);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodoList = props.tasks.filter(t => t.isDone === true);\r\n    }\r\n\r\n    return (<div>\r\n            <h3><EdditAbleSpan title={props.title} onChange={changeTodolistTitle}/>\r\n                <IconButton onClick={removeTodolist}><Delete/></IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>{\r\n                tasksForTodoList.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id);\r\n                    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id)\r\n                    }\r\n                    const onChangeTitleHandler = (newValue: string) => {\r\n                        props.changeTaskTitle(t.id, newValue, props.id);\r\n                    }\r\n                    return <div key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <Checkbox color={'primary'} onChange={onChangeStatusHandler} checked={t.isDone}/>\r\n                        <EdditAbleSpan title={t.title} onChange={onChangeTitleHandler}/>\r\n                        <IconButton aria-label=\"delete\"\r\n                                    onClick={onClickHandler}>\r\n                            <Delete fontSize=\"medium\"/>\r\n                        </IconButton>\r\n\r\n                    </div>\r\n                })\r\n            }\r\n            </div>\r\n            <div>\r\n                <Button variant={props.filter === 'all' ? \"outlined\" : 'text'}\r\n                        onClick={onAllClickHandler}\r\n                        color={\"default\"}>All\r\n                </Button>\r\n                <Button variant={props.filter === 'active' ? \"outlined\" : \"text\"}\r\n                        onClick={onActiveHandler}\r\n                        color={\"primary\"}>Active\r\n                </Button>\r\n                <Button variant={props.filter === \"completed\" ? \"outlined\" : \"text\"}\r\n                        onClick={onCompletedClickHandler}\r\n                        color={\"secondary\"}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nexport default Todolist;\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, IconButton, Box, Toolbar, Typography} from \"@material-ui/core\";\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport {Container, Grid, Paper} from \"@mui/material\";\r\nimport {\r\n    AddTodolistAC,\r\n    ChangeTodolistFilterAC,\r\n    ChangeTodolistTitleAC,\r\n    RemoveTodolistAC,\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./state/store\";\r\nimport {Todolist} from \"./Todolist\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type TasksType = {\r\n    title: string\r\n    id: string,\r\n    isDone: boolean,\r\n\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: 'all' | \"active\" | \"completed\"\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TasksType>\r\n}\r\n\r\n\r\nfunction AppWithRedux() {\r\n    console.log(\"APP\")\r\n    const dispatch = useDispatch()\r\n    const todolists = useSelector<AppRootState, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootState, TasksStateType>(state => state.tasks)\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        const action = removeTaskAC(id, todolistId);\r\n        dispatch(action);\r\n    }\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        const action = addTaskAC(title, todolistId);\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeStatus = useCallback((id: string, isDone: boolean, todolistId: string) => {\r\n        const action = changeTaskStatusAC(id, isDone, todolistId);\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        dispatch(ChangeTodolistFilterAC(value, todolistId))\r\n    }, [dispatch])\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(RemoveTodolistAC(id))\r\n        dispatch(RemoveTodolistAC(id));\r\n    }, [dispatch]);\r\n    const addTodolist = useCallback((title: string) => {\r\n        const action = AddTodolistAC(title);\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeTodolistTitle = useCallback((id: string, newTitle: string) => {\r\n        dispatch(ChangeTodolistTitleAC(id, newTitle))\r\n    }, [dispatch])\r\n    return (\r\n        <div>\r\n            <Box sx={{flexGrow: 1}}>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar variant=\"dense\">\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <MenuIcon/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" color=\"inherit\" component=\"div\">\r\n                            Photos\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </Box>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map((tl) => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodoList = allTodolistTasks\r\n\r\n                            return <Grid item>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodoList}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {todolistsReducer} from \"./todolists-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\n// type AppRootState = {\r\n//     todlists:Array<TodolistType>\r\n//     tasks:TasksStateType\r\n// }\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport AppWithreducers from \"./AppWithReducers\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <AppWithRedux/>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}