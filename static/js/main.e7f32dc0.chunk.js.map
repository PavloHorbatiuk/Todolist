{"version":3,"sources":["AddItemForm.tsx","EdditAbleSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addTask","trim","addItem","className","TextField","variant","label","id","defaultValue","size","value","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","color","onClick","AddBox","EdditAbleSpan","editMode","seteditMode","autoFocus","onBlur","onDoubleClick","Todolist","newTitle","changeTodolistTitle","removeTodolist","Delete","tasks","map","t","key","isDone","Checkbox","newIsDoneValue","checked","changeTaskStatus","newValue","changeTaskTitle","aria-label","removeTask","fontSize","Button","filter","changeFilter","App","todolistId","todolistTasks","setTasks","task","v1","changeStatus","find","todolist","todolists","tl","setTodolists","todolistId1","todolistId2","Box","sx","flexGrow","AppBar","position","Toolbar","edge","Typography","component","Container","fixed","Grid","container","style","padding","spacing","allTodolistTasks","tasksForTodoList","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e7f32dc0.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormType = {\r\n    addItem: (title: string) => void\r\n   }\r\n\r\nfunction AddItemForm(props: AddItemFormType) {\r\n    let [title, setTitle] = useState(\"\");\r\n    let [error, setError] = useState<string | null>(null)\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title.trim());\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    };\r\n    const onKeyPressPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <TextField\r\n                variant={'filled'}\r\n                label=\"Введите задание\"\r\n                id=\"outlined-size-small\"\r\n                defaultValue=\"\"\r\n                size=\"small\"\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressPressHandler}\r\n                error={!!error}\r\n                helperText={error}\r\n            />\r\n            <IconButton  color=\"primary\"\r\n                    onClick={addTask}><AddBox/></IconButton>\r\n            {/*{error && <div className='error-message'>{error}</div>}*/}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddItemForm;\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EdditAbleSpanType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EdditAbleSpan(props: EdditAbleSpanType) {\r\n    let [editMode, seteditMode] = useState(false)\r\n    let [title, setTitle] = useState(props.title)\r\n    const activateEditmode = () => {\r\n        seteditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViwMode = () => {\r\n        seteditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const changeTitle=(e:ChangeEvent<HTMLInputElement>)=>{\r\n       setTitle( e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViwMode}/>\r\n        : <span onDoubleClick={activateEditmode}>{props.title}</span>\r\n}","import React, {ChangeEvent} from 'react';\r\nimport './App.css';\r\nimport {TasksType} from \"./App\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {EdditAbleSpan} from \"./EdditAbleSpan\";\r\n\r\n\r\ntype TodolistType = {\r\n    title: string\r\n    tasks: Array<TasksType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: 'all' | \"active\" | \"completed\", todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (id: string, newTitle:string, todolistId: string) => void\r\n    filter: 'all' | \"active\" | \"completed\"\r\n    id: string\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodolistTitle:(id:string,newTitle:string)=>void\r\n}\r\ntype TaskStateType = {\r\n    [key: string]: Array<TasksType>\r\n}\r\n\r\nfunction Todolist(props: TodolistType) {\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id);\r\n    }\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle=(newTitle:string)=>{\r\n        props.changeTodolistTitle(props.id,newTitle);\r\n    }\r\n    const onAllClickHandler = () => {\r\n        props.changeFilter(\"all\", props.id)\r\n    }\r\n    const onActiveHandler = () => {\r\n        props.changeFilter(\"active\", props.id)\r\n    }\r\n    const onCompletedClickHandler = () => {\r\n        props.changeFilter(\"completed\", props.id)\r\n    };\r\n\r\n\r\n    return (<div>\r\n            <h3><EdditAbleSpan title={props.title} onChange={changeTodolistTitle}/>\r\n                <IconButton onClick={removeTodolist}><Delete/></IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>{\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id);\r\n                    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id)\r\n                    }\r\n                    const onChangeTitleHandler = (newValue:string)=>{\r\n                        props.changeTaskTitle(t.id, newValue,props.id);\r\n                    }\r\n                    return <div key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <Checkbox color={'primary'} onChange={onChangeStatusHandler} checked={t.isDone}/>\r\n                        <EdditAbleSpan title={t.title} onChange={onChangeTitleHandler}/>\r\n                        <IconButton aria-label=\"delete\"\r\n                                    onClick={onClickHandler}>\r\n                            <Delete fontSize=\"medium\"/>\r\n                        </IconButton>\r\n\r\n                    </div>\r\n                })\r\n            }\r\n            </div>\r\n            <div>\r\n                <Button variant={props.filter === 'all' ? \"outlined\" : 'text'}\r\n                        onClick={onAllClickHandler}\r\n                        color={\"default\"}>All\r\n                </Button>\r\n                <Button variant={props.filter === 'active' ? \"outlined\" : \"text\"}\r\n                        onClick={onActiveHandler}\r\n                        color={\"primary\"}>Active\r\n                </Button>\r\n                <Button variant={props.filter === \"completed\" ? \"outlined\" : \"text\"}\r\n                        onClick={onCompletedClickHandler}\r\n                        color={\"secondary\"}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Todolist;\r\n","import React, {useState} from 'react';\r\nimport {v1} from 'uuid';\r\nimport './App.css';\r\nimport Todolist from \"./Todolist\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, IconButton, Box, Toolbar, Typography} from \"@material-ui/core\";\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport {Container, Grid, Paper} from \"@mui/material\";\r\n\r\nexport type TasksType = {\r\n    title: string\r\n    id: string,\r\n    isDone: boolean,\r\n\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: 'all' | \"active\" | \"completed\"\r\n}\r\ntype tasksStateType = {\r\n    [key: string]: Array<TasksType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    function removeTask(id: string, todolistId: string) {\r\n        let todolistTasks = tasks[todolistId]\r\n        tasks[todolistId] = todolistTasks.filter(t => t.id != id)\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        let todolistTasks = tasks[todolistId]\r\n        tasks[todolistId] = [task, ...todolistTasks];\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        let todolistTasks = tasks[todolistId]\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeTaskTitle(id: string, newTitle: string, todolistId: string) {\r\n        let todolistTasks = tasks[todolistId]\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        if (task) {\r\n            task.title = newTitle;\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeFilter(value: 'all' | \"active\" | \"completed\", todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId)\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists]);\r\n        }\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        setTodolists(todolists.filter(tl => tl.id != id));\r\n        delete tasks[id];\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTodolist(title: string) {\r\n        let todolist: TodolistType = {\r\n            id: v1(),\r\n            filter: 'all',\r\n            title: title\r\n        }\r\n        setTodolists([todolist, ...todolists])\r\n        setTasks({\r\n            ...tasks,\r\n            [todolist.id]: []\r\n        })\r\n    }\r\n\r\n    function changeTodolistTitle(id: string, newTitle: string) {\r\n        const todolist = todolists.find(tl => tl.id === id);\r\n        if (todolist) {\r\n            todolist.title = newTitle\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"active\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"completed\"},\r\n    ])\r\n    let [tasks, setTasks] = useState<tasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: false},\r\n            {id: v1(), title: \"JS\", isDone: false},\r\n            {id: v1(), title: \"ReactJS\", isDone: true},\r\n            {id: v1(), title: \"Res API\", isDone: true},\r\n            {id: v1(), title: \"GraphQL\", isDone: true}],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Book\", isDone: true},\r\n            {id: v1(), title: \"Milk\", isDone: false},\r\n        ]\r\n    });\r\n    return (\r\n        <div>\r\n            <Box sx={{flexGrow: 1}}>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar variant=\"dense\">\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <MenuIcon/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" color=\"inherit\" component=\"div\">\r\n                            Photos\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </Box>\r\n            <Container fixed>\r\n                <Grid container style ={{padding:\"20px\"}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing ={3}>\r\n            {\r\n                todolists.map((tl) => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n                    let tasksForTodoList = allTodolistTasks\r\n                    if (tl.filter === \"active\") {\r\n                        tasksForTodoList = allTodolistTasks.filter(t => t.isDone);\r\n                    }\r\n                    if (tl.filter === \"completed\") {\r\n                        tasksForTodoList = allTodolistTasks.filter(t => t.isDone);\r\n                    }\r\n                    return<Grid item>\r\n                        <Paper style={{padding:\"10px\"}}>\r\n                        <Todolist\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasksForTodoList}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeStatus}\r\n                        filter={tl.filter}\r\n                        removeTodolist={removeTodolist}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodolistTitle={changeTodolistTitle}\r\n                    />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}